// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String     @id @default(uuid())
  displayName  String
  userName     String     @unique
  profilePhoto String
  bio          String
  email        String     @unique
  Posts        Post[]
  Votes        Vote[]
  createdAt    DateTime   @default(now())
  Likes        Like[]
  Arguments    Argument[]
  Replies      Reply[]
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  image     String
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  Comments  Comment[]
  createdAt DateTime  @default(now())
  Likes     Like[]
  type      String
}

model Comment {
  id           String    @id @default(uuid())
  content      String
  postId       String
  post         Post      @relation(fields: [postId], references: [id])
  authorId     String
  argumentSide String?
  author       Argument? @relation(fields: [authorId], references: [id])
  createdAt    DateTime  @default(now())
  likesCount   Int
  Likes        Like[]
  Replies      Reply[]
}

model Reply {
  id         String  @id @default(uuid())
  reply      String
  commentId  String
  comment    Comment @relation(fields: [commentId], references: [id])
  authorId   String
  likesCount Int
  Likes      Like[]
  User       User?   @relation(fields: [userId], references: [id])
  userId     String?
}

model Argument {
  id         String    @id @default(uuid())
  question   String
  sideA      String
  sideB      String
  votesCount Int
  Votes      Vote[]
  userId     String
  Comments   Comment[]
  createdAt  DateTime  @default(now())
  User       User      @relation(fields: [userId], references: [id])
  type       String
}

model Vote {
  id         String   @id @default(uuid())
  userId     String
  argumentId String
  argument   Argument @relation(fields: [argumentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  Reply     Reply?   @relation(fields: [replyId], references: [id])
  replyId   String?
}
